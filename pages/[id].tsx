import {
  ActionIcon,
  Badge,
  Button,
  Card,
  CardSection,
  Center,
  Group,
  InputWrapper,
  Kbd,
  MultiSelect,
  NumberInput,
  Select,
  Text,
  TextInput,
  Timeline,
  useMantineTheme,
} from "@mantine/core";
import { DatePicker } from "@mantine/dates";
import dayjs from "dayjs";
import type { NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { ArrowLeft, Clock2, History } from "tabler-icons-react";
import User from "../components/User";
import { useSubcriptions } from "../hooks/useSubcriptions";
import { useSubcription } from "../hooks/useSubscription";

const DATE_TYPES = {
  year: "An(s)",
  month: "Mois(s)",
  day: "Jour(s)",
  hour: "Heure(s)",
  minute: "Minute(s)",
  second: "Seconde(s)",
};

const ID: NextPage = () => {
  const { subscriptions } = useSubcriptions({});
  const { deleteS, loading } = useSubcription({});

  const [confirmDelete, setConfirmDelete] = useState(false);
  const [nbPayments, setNbPayments] = useState<number>(0);
  const [timeBeforePayment, setTimeBeforePayment] = useState("");

  const router = useRouter();
  const theme = useMantineTheme();

  const subs = subscriptions.find((s) => s.id === router.query.id);

  useEffect(() => {
    if (subs) {
      let iterator = subs.firstPayment;
      const now = dayjs(new Date());

      let counter = 0;

      while (iterator.isBefore(now)) {
        iterator = iterator.add(subs.recurrenceCount, subs.recurrenceType);
        counter++;
      }

      setNbPayments(counter);

      setTimeBeforePayment(now.locale("fr").to(iterator));
    }
  }, [subs]);

  if (!subs) return <>Oupsi</>;

  const handleDelete = () => {
    deleteS(subs.id);
    router.replace("/");
  };

  return (
    <div>
      <Head>
        <title>Subiby</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main style={{ padding: 10 }}>
        <User />
        <h2
          style={{
            marginLeft: 10,
            marginTop: 20,
            display: "flex",
            flexWrap: "nowrap",
          }}
        >
          <ActionIcon
            variant="transparent"
            style={{ marginRight: 10 }}
            onClick={() => router.push("/")}
          >
            <ArrowLeft strokeWidth={3} color={"black"} />
          </ActionIcon>
          {subs.label}
        </h2>
        <div style={{ padding: 10 }}>
          <Card
            shadow="sm"
            style={{
              padding: 30,
            }}
          >
            <Group position="apart">
              <h2>{subs.label}</h2>
              <Badge color={subs.color} variant="light" size="xl">
                {subs.price.toFixed(2)}€
              </Badge>
            </Group>
            <Text weight="400" size="md" style={{ marginTop: 0 }}>
              {subs.details}
            </Text>
            <Group position="left" style={{ marginTop: 40 }}>
              {subs.tags.map((t, i) => (
                <Badge color="gray" key={i} radius="xs" size="lg">
                  {t}
                </Badge>
              ))}
            </Group>
            <Timeline
              active={0}
              bulletSize={24}
              lineWidth={2}
              color={subs.color}
              style={{ marginTop: 60 }}
            >
              <Timeline.Item
                bullet={<Clock2 size={12} />}
                title="Prochain paiement"
              >
                <Text color="" size="sm">
                  {timeBeforePayment}
                </Text>
              </Timeline.Item>

              <Timeline.Item
                title=""
                bulletSize={1}
                bullet={<></>}
                lineVariant="dashed"
              >
                <Text size="md" style={{ marginTop: 20 }}>
                  Récurrence
                </Text>
                <Text size="sm">
                  Tous les <Kbd>{subs.recurrenceCount}</Kbd> &nbsp;{" "}
                  <Kbd>{DATE_TYPES[subs.recurrenceType]}</Kbd>
                </Text>
              </Timeline.Item>

              <Timeline.Item
                title=""
                bulletSize={1}
                bullet={<></>}
                lineVariant="dashed"
              >
                <Text size="md" style={{ marginTop: 20 }}>
                  Somme dépensée <Kbd>{nbPayments * subs.price}€</Kbd>
                </Text>
              </Timeline.Item>

              <Timeline.Item
                title="Premier paiement"
                bullet={<History size={12} />}
              >
                <Text size="sm">
                  le {subs.firstPayment.format("DD/MM/YYYY")}
                </Text>
              </Timeline.Item>
            </Timeline>
          </Card>
          <Group position="right" style={{ marginTop: 20 }}>
            {confirmDelete && (
              <>
                <Button
                  variant="light"
                  color="red"
                  loading={loading}
                  onClick={handleDelete}
                >
                  Confirmer
                </Button>
                <Button
                  variant="subtle"
                  color="gray"
                  loading={loading}
                  onClick={() => setConfirmDelete(false)}
                >
                  Annuler
                </Button>
              </>
            )}
            {!confirmDelete && (
              <Button
                variant="light"
                color="red"
                loading={loading}
                onClick={() => setConfirmDelete(true)}
              >
                Supprimer
              </Button>
            )}
          </Group>
        </div>
      </main>
    </div>
  );
};

export default ID;
